rule ParmToVariable
     transform Parm : SequenceModel!Parm
     to Variable : AbstractTestModel!Variable {
        Variable.name = Parm.name
        Variable.type = Parm.type
     }


rule LifeLineToClass
     transform SequnceDiagramLifeLine : SequenceModel!LifeLine
     to Class : AbstractTestModel!Class {
        Class.name = LifeLine.name
        class.start = LifeLine.start
     }


    
rule MessageToMethod
     transform SequnceDiagramMessage : SequenceModel!Message
     to Method : AbstractTestModel!Method {
        Method.name = Message.name
       // Method.source = Message.source
       // Method.target = Message.target
        Method.variables.addAll(Message.Operation.params)
        //the return One
        Method.variable = Message.Operation.returnVariable
     }


rule SequnceDiagramToTest
        transform SequnceDiagram : SequenceModel!SequenceDiagram
        to Test : AbstractTestModel!Test {
            Test.name = SequnceDiagram.lifeLines.findFirst[ it.start ].name.concat("Test_")
            //the lifeLine where start is true 
            Test.class.name = SequnceDiagram.lifeLines.findFirst[ it.start ].name
            Test.class.classes.addAll(SequnceDiagram.lifeLines.findAll[ !it.start ].collect[ it.name ])
            
        }
