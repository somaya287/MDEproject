rule ParmToVariable
     transform Parm : SequenceModel!Parm
     to Variable : AbstractTestModel!Variable {
        Variable.name = Parm.name
        Variable.type = Parm.type

     }

    
rule MessageToMethod
     transform SequnceDiagramMessage : SequenceModel!Message
     to Method : AbstractTestModel!Method {

      guard Method.source.isDefined() && Method.target.isDefined()
        
        Method.name = Message.name
        Method.variables.addAll(Message.Operation.params.collect[ it.equivalent() ])
        //the return One
         Method.variable = Message.Operation.returnVariable
      //   Method.parent.class.name = Message.source.name
      //   Method.parent.class.methodes.add(Method)
     }

rule LifeLineToClass
     transform SequnceDiagramLifeLine : SequenceModel!LifeLine
     to Class : AbstractTestModel!Class {
        Class.name = LifeLine.name
        class.dependencies.addAll(SequenceModel!.Message.findAll[ it.source == LifeLine.name ].collect[ it.target.equivalent() ])
        class.methodes.addAll(SequenceModel!.Message.findAll[ it.source == LifeLine.name ].collect[ it.Message.equivalent() ])

     }



rule SequnceDiagramToTest
        transform SequnceDiagram : SequenceModel!SequenceDiagram
        to Test : AbstractTestModel!Test {
            Test.name = SequnceDiagram.lifeLines.findFirst[ it.start ].name.concat("Test_")
            //the lifeLine where start is true 
            Test.class = SequnceDiagram.lifeLines.findFirst[ it.start ].equivalent()
            
        }
