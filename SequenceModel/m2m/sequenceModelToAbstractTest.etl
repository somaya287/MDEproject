rule ParmToVariable
     transform Parm : SequenceModel!Parm
     to Variable : AbstractTestModel!Variable {
        Variable.name = Parm.name
        Variable.type = Parm.type
     }


rule LifeLineToClass
     transform SequnceDiagramLifeLine : SequenceModel!LifeLine
     to Class : AbstractTestModel!Class {
        Class.name = LifeLine.name
        //if LifeLine.start ==true , then this class is to be Root of classes?


     }


rule MessageToMethod
     transform SequnceDiagramMessage : SequenceModel!Message
     to Method : AbstractTestModel!Method {
        Method.name = Message.name
       // Method.source = Message.source
       // Method.target = Message.target
        Method.variables.addAll(Message.Operation.params)
        //the return One
        Method.variable = Message.Operation.returnVariable
     }


rule SequnceDiagramToTest
        transform SequnceDiagram : SequenceModel!SequenceDiagram
        to Test : AbstractTestModel!Test {
            Test.name = SequnceDiagram.name
            Test.classes.addAll(SequnceDiagram.lifelines)
            Test.methods.addAll(SequnceDiagram.messages)
        }
