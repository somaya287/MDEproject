@lazy
rule ParmToVariable
     transform param : SequenceModel!Param
     to variable : AbstractTestModel!Variable {
        variable.name = param.name;
        variable.type = param.type;

     }

@lazy  
rule MessageToMethod
     transform message : SequenceModel!Message
     to method : AbstractTestModel!Method {

      	guard : Method.source.isDefined() and Method.target.isDefined() 
        method.name = message.name;
        method.parameters.addAll(message.Operation.params.collect(it | it.equivalent("ParmToVariable")));
        //the return One
        method.returnValue = message.Operation.returnVariable;
      //   Method.parent.class.name = Message.source.name
      //   Method.parent.class.methodes.add(Method)
     }

@lazy
rule LifeLineToClass
     transform lifeLine : SequenceModel!LifeLine
     to class : AbstractTestModel!Class {
        class.name = lifeLine.name;
        class.dependencies.addAll(SequenceModel!Message.all.select(it | it.source == lifeLine.name).collect(it | it.target.equivalent("LifeLineToClass")));
        class.methods.addAll(SequenceModel!Message.all.select(it | it.source == lifeLine.name).collect(it | it.Message.equivalent("MessageToMethod") ));

     }


@primary
rule SequnceDiagramToTest
        transform sequenceDiagram : SequenceModel!SequenceDiagram
        to test : AbstractTestModel!Test {
            //test.name = sequenceDiagram.lifeLines.select(it | it.start ).at(0).name;
            //the lifeLine where start is true 
            test.testClass = sequenceDiagram.lifeLines.select(it |  it.start ).at(0).equivalent("LifeLineToClass");
            
     }
