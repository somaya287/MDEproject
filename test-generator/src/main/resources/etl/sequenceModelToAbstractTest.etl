pre {
	var dependencies = new OrderedSet;
	var previous = new OrderedSet;
}

operation existsInPrevious(lifeline : String) : Boolean {
	return dependencies.includes(lifeline);
}

operation addToDependencies(class : AbstractTestModel!Class) {
	dependencies.add(class);
}

operation addToPrevious(lifeline : String) {
	previous.add(lifeline);
}

operation getDependencies() : OrderedSet {
	return dependencies;
}

@lazy
rule ParmToVariable
     transform param : SequenceModel!Param
     to variable : AbstractTestModel!Variable {
        variable.name = param.argName;
        variable.type = param.argType;

}

@lazy
rule OperationToVariable
	 transform operationn : SequenceModel!Operation 
	 to variable : AbstractTestModel!Variable {
	 	
	 	variable.type = operationn.returnType;
	 	variable.name = operationn.returnVariable;
} 

@lazy  
rule MessageToMethod
     transform message : SequenceModel!Message
     to method : AbstractTestModel!Method {

      	guard : message.source.isDefined() and message.target.isDefined() 
        method.name = message.name;
        method.parameters.addAll(message.operationn.param.collect(it | it.equivalent("ParmToVariable")));
        //the return One
        method.returnValue = message.operationn.equivalent("OperationToVariable");
      //   Method.parent.class.name = Message.source.name
      //   Method.parent.class.methodes.add(Method)
     }
     

@lazy
rule LifeLineToClass
     transform lifeLine : SequenceModel!LifeLine
     to class : AbstractTestModel!Class {
     	guard : not existsInPrevious(lifeLine.name) and not lifeLine.start
     	addToPrevious(lifeLine.name);
     	
        class.name = lifeLine.name;
        class.methods.addAll(SequenceModel!Message.all.select(it | it.target.name == lifeLine.name).equivalent("MessageToMethod"));
        
        addToDependencies(class);
}

@lazy
rule LifeLineToStartClass
     transform lifeLine : SequenceModel!LifeLine
     to class : AbstractTestModel!Class {
     
     	guard : lifeLine.start
        SequenceModel!Message.all.select(it | it.source.name == lifeLine.name).collect(it | it.target).equivalent("LifeLineToClass").at(0);
        class.dependencies.addAll(getDependencies());
        class.name = lifeLine.name;
        class.methods.addAll(SequenceModel!Message.all.select(it | it.target.name == lifeLine.name).equivalent("MessageToMethod"));
}


@primary
rule SequnceDiagramToTest
        transform sequenceDiagram : SequenceModel!SequenceDiagram
        to test : AbstractTestModel!Test {
            //test.name = sequenceDiagram.lifeLines.select(it | it.start ).at(0).name;
            //the lifeLine where start is true 
            test.testClass = sequenceDiagram.lifeLines.select(it |  it.start ).at(0).equivalent("LifeLineToStartClass");
            
     }
