@lazy
rule ParmToVariable
     transform param : SequenceModel!Param
     to variable : AbstractTestModel!Variable {
        variable.name = param.name;
        variable.type = param.type;

}

@lazy
rule OperationToVariable
	 transform operationn : SequenceModel!Operation 
	 to variable : AbstractTestModel!Variable {
	 	
	 	variable.type = operationn.returnType;
	 	variable.name = operationn.returnVariable;
} 

@lazy  
rule MessageToMethod
     transform message : SequenceModel!Message
     to method : AbstractTestModel!Method {

      	guard : message.source.isDefined() and message.target.isDefined() 
        method.name = message.name;
        method.parameters.addAll(message.operationn.param.collect(it | it.equivalent("ParmToVariable")));
        //the return One
        method.returnValue = message.operationn.equivalent("OperationToVariable");
      //   Method.parent.class.name = Message.source.name
      //   Method.parent.class.methodes.add(Method)
     }

@lazy
rule LifeLineToClass
     transform lifeLine : SequenceModel!LifeLine
     to class : AbstractTestModel!Class {
        class.name = lifeLine.name;
        class.dependencies.addAll(SequenceModel!Message.all.select(it | it.source.name == lifeLine.name).collect(it | it.target).equivalent("LifeLineToClass"));
        class.methods.addAll(SequenceModel!Message.all.select(it | it.target.name == lifeLine.name).equivalent("MessageToMethod"));
}

@lazy
rule LifeLineToStartClass
     transform lifeLine : SequenceModel!LifeLine
     to class : AbstractTestModel!Class {
     
     	guard : lifeLine.start
        class.name = lifeLine.name;
        var temp = SequenceModel!Message.all.select(it | it.source.name == lifeLine.name).collect(it | it.target).equivalent("LifeLineToClass").at(0);
        class.dependencies.add(temp);
        var temp2;
        while (not temp.dependencies.isEmpty()) {
        	temp2 = temp;
        	temp = temp.dependencies.at(0);
        	temp.dependencies.clear();
        	class.dependencies.add(temp);
        }
        class.methods.addAll(SequenceModel!Message.all.select(it | it.target.name == lifeLine.name).equivalent("MessageToMethod"));
}



@primary
rule SequnceDiagramToTest
        transform sequenceDiagram : SequenceModel!SequenceDiagram
        to test : AbstractTestModel!Test {
            //test.name = sequenceDiagram.lifeLines.select(it | it.start ).at(0).name;
            //the lifeLine where start is true 
            test.testClass = sequenceDiagram.lifeLines.select(it |  it.start ).at(0).equivalent("LifeLineToStartClass");
            
     }
